@model KartverketWebApp.Models.CombinedViewModel
@{
    var position = Model.Positions.FirstOrDefault();
}

<div class="container">
 
    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5>Tittel</h5>
                    <p>@position?.Tittel</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5>Beskrivelse</h5>
                    <p>@position?.Beskrivelse</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5>Rapporttype</h5>
                    <p>@position?.RapportType</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div id="map_corrections" style="height: 400px; width: 100%;"></div>
        </div>
    </div>

    @section Scripts {
        <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
        <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />

        <script>
            // Debug logging
            console.log('Full positions data:', @Html.Raw(Json.Serialize(Model.Positions)));

            // Ensure the model is properly serialized
            var positions = @Html.Raw(Json.Serialize(Model.Positions));

            if (positions && positions.length > 0) {
                positions.forEach(function (position, index) {
                    // Debug logging
                    console.log('Position object:', position);
                    console.log('MapType:', position.MapType); // Try uppercase
                    console.log('mapType:', position.mapType); // Try lowercase
                    console.log('maptype:', position.maptype); // Try all lowercase

                    // Check if coordinates exists and has items
                    if (position.coordinates && position.coordinates.length > 0) {
                        // Use the first coordinate to set map view
                        var firstCoord = position.coordinates[0];
                        var map = L.map('map_corrections').setView([firstCoord.nord, firstCoord.ost], 13);

                        // Define all available layers
                        var norgeKart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topo/default/webmercator/{z}/{y}/{x}.png', {
                            attribution: '&copy; <a href="https://www.kartverket.no/">Kartverket</a>'
                        });

                        var turKart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/toporaster/default/webmercator/{z}/{y}/{x}.png', {
                            attribution: '&copy; <a href="https://www.kartverket.no/">Kartverket</a>'
                        });

                        var sjoKart = L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/sjokartraster/default/webmercator/{z}/{y}/{x}.png', {
                            attribution: '&copy; <a href="https://www.kartverket.no/">Kartverket</a>'
                        });

                        // Select layer based on maptype with debugging
                        var selectedLayer;
                        var mapType = position.MapType || position.mapType || position.maptype;
                        console.log('Final mapType value:', mapType);

                        switch ((mapType || '').toLowerCase()) {
                            case 'turkart':
                                console.log('Selected: Turkart');
                                selectedLayer = turKart;
                                break;
                            case 'sjøkart':
                            case 'sjokart':
                                console.log('Selected: Sjøkart');
                                selectedLayer = sjoKart;
                                break;
                            case 'norgekart':
                            case 'norge kart':
                                console.log('Selected: Norgekart');
                                selectedLayer = norgeKart;
                                break;
                            default:
                                console.log('Selected: Default (Norgekart)');
                                selectedLayer = norgeKart;
                                break;
                        }

                        // Add the selected layer to the map
                        selectedLayer.addTo(map);

                        // Collect the coordinates for the polyline
                        var latlngs = position.coordinates.map(function (coord) {
                            return [coord.nord, coord.ost];
                        });

                        // Draw the polyline on the map
                        var polyline = L.polyline(latlngs, {
                            color: 'blue',
                            weight: 3,
                            opacity: 0.7
                        }).addTo(map);

                        // Fit the map to show all points
                        map.fitBounds(polyline.getBounds(), {
                            padding: [50, 50]
                        });
                    } else {
                        console.warn('Position is missing coordinates:', position);
                    }
                });
            } else {
                console.warn('No positions available to display on the map.');
                var map = L.map('map_corrections').setView([65.4, 17.3], 4);
                norgeKart.addTo(map);
            }
        </script>
    }
</div>