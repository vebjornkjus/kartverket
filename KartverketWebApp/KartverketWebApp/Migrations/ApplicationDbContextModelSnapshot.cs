// <auto-generated />
using System;
using KartverketWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KartverketWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("KartverketWebApp.Data.Ansatt", b =>
                {
                    b.Property<int>("AnsattId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AnsattId"));

                    b.Property<DateTime?>("AnsettelsesDato")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Kommunenummer")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("AnsattId");

                    b.HasIndex("PersonId");

                    b.ToTable("Ansatt");

                    b.HasData(
                        new
                        {
                            AnsattId = 1,
                            AnsettelsesDato = new DateTime(2023, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kommunenummer = 1,
                            PersonId = 12
                        },
                        new
                        {
                            AnsattId = 2,
                            AnsettelsesDato = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kommunenummer = 301,
                            PersonId = 14
                        },
                        new
                        {
                            AnsattId = 3,
                            AnsettelsesDato = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kommunenummer = 4601,
                            PersonId = 15
                        },
                        new
                        {
                            AnsattId = 4,
                            AnsettelsesDato = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kommunenummer = 1101,
                            PersonId = 16
                        },
                        new
                        {
                            AnsattId = 5,
                            AnsettelsesDato = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kommunenummer = 5001,
                            PersonId = 17
                        },
                        new
                        {
                            AnsattId = 6,
                            AnsettelsesDato = new DateTime(2024, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kommunenummer = 3005,
                            PersonId = 18
                        },
                        new
                        {
                            AnsattId = 7,
                            AnsettelsesDato = new DateTime(2024, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kommunenummer = 3004,
                            PersonId = 19
                        },
                        new
                        {
                            AnsattId = 8,
                            AnsettelsesDato = new DateTime(2024, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kommunenummer = 4204,
                            PersonId = 20
                        },
                        new
                        {
                            AnsattId = 9,
                            AnsettelsesDato = new DateTime(2024, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kommunenummer = 1108,
                            PersonId = 21
                        },
                        new
                        {
                            AnsattId = 10,
                            AnsettelsesDato = new DateTime(2024, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kommunenummer = 5401,
                            PersonId = 22
                        },
                        new
                        {
                            AnsattId = 11,
                            AnsettelsesDato = new DateTime(2024, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kommunenummer = 1804,
                            PersonId = 23
                        });
                });

            modelBuilder.Entity("KartverketWebApp.Data.Bruker", b =>
                {
                    b.Property<int>("BrukerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BrukerId"));

                    b.Property<string>("BrukerType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Passord")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BrukerId");

                    b.ToTable("Bruker");

                    b.HasData(
                        new
                        {
                            BrukerId = 1,
                            BrukerType = "standard",
                            Email = "bruker1@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 2,
                            BrukerType = "standard",
                            Email = "bruker2@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 3,
                            BrukerType = "standard",
                            Email = "bruker3@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 4,
                            BrukerType = "standard",
                            Email = "bruker4@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 5,
                            BrukerType = "standard",
                            Email = "bruker5@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 6,
                            BrukerType = "standard",
                            Email = "bruker6@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 7,
                            BrukerType = "standard",
                            Email = "bruker7@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 8,
                            BrukerType = "standard",
                            Email = "bruker8@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 9,
                            BrukerType = "standard",
                            Email = "bruker9@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 10,
                            BrukerType = "standard",
                            Email = "bruker10@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 11,
                            BrukerType = "spesial",
                            Email = "ambulansen@test.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 12,
                            BrukerType = "saksbehandler",
                            Email = "saksbehandler@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 13,
                            BrukerType = "admin",
                            Email = "admin@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 14,
                            BrukerType = "saksbehandler",
                            Email = "OsloOslo@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 15,
                            BrukerType = "saksbehandler",
                            Email = "VestlandBergen@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 16,
                            BrukerType = "saksbehandler",
                            Email = "RogalandStavanger@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 17,
                            BrukerType = "saksbehandler",
                            Email = "Tr�ndelagTrondheim@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 18,
                            BrukerType = "saksbehandler",
                            Email = "VikenDrammen@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 19,
                            BrukerType = "saksbehandler",
                            Email = "VikenFredrikstad@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 20,
                            BrukerType = "saksbehandler",
                            Email = "AgderKristiansand@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 21,
                            BrukerType = "saksbehandler",
                            Email = "RogalandSandnes@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 22,
                            BrukerType = "saksbehandler",
                            Email = "TromsOgFinnmarkTroms�@example.com",
                            Passord = "passord123"
                        },
                        new
                        {
                            BrukerId = 23,
                            BrukerType = "saksbehandler",
                            Email = "NordlandBod�@example.com",
                            Passord = "passord123"
                        });
                });

            modelBuilder.Entity("KartverketWebApp.Data.Kart", b =>
                {
                    b.Property<int>("KartEndringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("KartEndringId"));

                    b.Property<string>("Beskrivelse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FilePath")
                        .HasColumnType("longtext");

                    b.Property<int>("Koordsys")
                        .HasColumnType("int");

                    b.Property<string>("MapType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RapportType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("SteddataId")
                        .HasColumnType("int");

                    b.Property<string>("Tittel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("KartEndringId");

                    b.HasIndex("SteddataId")
                        .IsUnique();

                    b.ToTable("Kart");

                    b.HasData(
                        new
                        {
                            KartEndringId = 1,
                            Beskrivelse = "Hull i veien på hovedgata. Dette hullet har blitt rapportert flere ganger og trenger umiddelbar oppmerksomhet fra vedlikeholdsteamet.",
                            Koordsys = 4258,
                            MapType = "Norge kart",
                            RapportType = "Veiskade",
                            SteddataId = 1,
                            Tittel = "Veiskade"
                        },
                        new
                        {
                            KartEndringId = 2,
                            Beskrivelse = "Området ved elvebredden har vært oversvømt i flere dager, og vannstanden ser ut til å fortsette å stige.",
                            Koordsys = 4258,
                            MapType = "Norge kart",
                            RapportType = "Oversvømmelse",
                            SteddataId = 2,
                            Tittel = "Oversvømt område"
                        },
                        new
                        {
                            KartEndringId = 3,
                            Beskrivelse = "Steinras som blokkerer en viktig sti i fjellområdet, og dette skaper en stor risiko for turgåere og fjellklatrere.",
                            Koordsys = 4258,
                            MapType = "Turkart",
                            RapportType = "Skredfare",
                            SteddataId = 3,
                            Tittel = "Fjellskred"
                        },
                        new
                        {
                            KartEndringId = 4,
                            Beskrivelse = "Stien er kraftig overgrodd med planter, og det er tydelige tegn på erosjon langs hele strekningen.",
                            Koordsys = 4258,
                            MapType = "Turkart",
                            RapportType = "Stivedlikehold",
                            SteddataId = 4,
                            Tittel = "Skadet sti"
                        },
                        new
                        {
                            KartEndringId = 5,
                            Beskrivelse = "Flere gamle båtvrak har samlet seg langs kystlinjen. Dette kan være farlig for mindre båter og svømmere.",
                            Koordsys = 4258,
                            MapType = "Sjøkart",
                            RapportType = "Ryddeaksjon",
                            SteddataId = 5,
                            Tittel = "Båtvrak"
                        },
                        new
                        {
                            KartEndringId = 6,
                            Beskrivelse = "Alvorlig trafikkulykke på motorveien med flere kjøretøy involvert. Krever umiddelbar rydding for å unngå kø.",
                            Koordsys = 4258,
                            MapType = "Norge kart",
                            RapportType = "Trafikkulykke",
                            SteddataId = 6,
                            Tittel = "Trafikkulykke"
                        },
                        new
                        {
                            KartEndringId = 7,
                            Beskrivelse = "Snøras i fjellområdet som har blokkert veien og kan utgjøre en fare for kommende trafikk.",
                            Koordsys = 4258,
                            MapType = "Turkart",
                            RapportType = "Snørasfare",
                            SteddataId = 7,
                            Tittel = "Snøras"
                        },
                        new
                        {
                            KartEndringId = 8,
                            Beskrivelse = "Sykkelstien har store sprekker og hull som gjør det vanskelig for syklister å bruke den trygt.",
                            Koordsys = 4258,
                            MapType = "Norge kart",
                            RapportType = "Sykkelsti reparasjon",
                            SteddataId = 8,
                            Tittel = "Sykkelsti skadet"
                        },
                        new
                        {
                            KartEndringId = 9,
                            Beskrivelse = "Båthavnen er overfylt med båter, noe som gjør det vanskelig for nye båter å legge til kai eller parkere.",
                            Koordsys = 4258,
                            MapType = "Sjøkart",
                            RapportType = "Overfylte båtplasser",
                            SteddataId = 9,
                            Tittel = "Båthavn"
                        },
                        new
                        {
                            KartEndringId = 10,
                            Beskrivelse = "Fiskefeltet er overbeskattet, og det er behov for strengere regulering for å bevare fiskebestanden.",
                            Koordsys = 4258,
                            MapType = "Sjøkart",
                            RapportType = "Fiskeriforvaltning",
                            SteddataId = 10,
                            Tittel = "Fiskefelt"
                        });
                });

            modelBuilder.Entity("KartverketWebApp.Data.Koordinater", b =>
                {
                    b.Property<int>("KoordinatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("KoordinatId"));

                    b.Property<int>("KartEndringId")
                        .HasColumnType("int");

                    b.Property<double>("Nord")
                        .HasColumnType("double");

                    b.Property<double>("Ost")
                        .HasColumnType("double");

                    b.Property<int>("Rekkefolge")
                        .HasColumnType("int");

                    b.HasKey("KoordinatId");

                    b.HasIndex("KartEndringId");

                    b.ToTable("Koordinater");

                    b.HasData(
                        new
                        {
                            KoordinatId = 1,
                            KartEndringId = 1,
                            Nord = 59.913899999999998,
                            Ost = 10.7522,
                            Rekkefolge = 1
                        },
                        new
                        {
                            KoordinatId = 2,
                            KartEndringId = 1,
                            Nord = 59.914000000000001,
                            Ost = 10.7523,
                            Rekkefolge = 2
                        },
                        new
                        {
                            KoordinatId = 3,
                            KartEndringId = 2,
                            Nord = 60.391300000000001,
                            Ost = 5.3220999999999998,
                            Rekkefolge = 1
                        },
                        new
                        {
                            KoordinatId = 4,
                            KartEndringId = 2,
                            Nord = 60.391500000000001,
                            Ost = 5.3224,
                            Rekkefolge = 2
                        },
                        new
                        {
                            KoordinatId = 5,
                            KartEndringId = 2,
                            Nord = 60.391399999999997,
                            Ost = 5.3223000000000003,
                            Rekkefolge = 3
                        },
                        new
                        {
                            KoordinatId = 6,
                            KartEndringId = 3,
                            Nord = 63.430500000000002,
                            Ost = 10.395099999999999,
                            Rekkefolge = 1
                        },
                        new
                        {
                            KoordinatId = 7,
                            KartEndringId = 3,
                            Nord = 63.430599999999998,
                            Ost = 10.395200000000001,
                            Rekkefolge = 2
                        },
                        new
                        {
                            KoordinatId = 8,
                            KartEndringId = 3,
                            Nord = 63.430700000000002,
                            Ost = 10.395300000000001,
                            Rekkefolge = 3
                        },
                        new
                        {
                            KoordinatId = 9,
                            KartEndringId = 3,
                            Nord = 63.430799999999998,
                            Ost = 10.3954,
                            Rekkefolge = 4
                        },
                        new
                        {
                            KoordinatId = 10,
                            KartEndringId = 4,
                            Nord = 58.146700000000003,
                            Ost = 7.9946000000000002,
                            Rekkefolge = 1
                        },
                        new
                        {
                            KoordinatId = 11,
                            KartEndringId = 4,
                            Nord = 58.146799999999999,
                            Ost = 7.9946999999999999,
                            Rekkefolge = 2
                        },
                        new
                        {
                            KoordinatId = 12,
                            KartEndringId = 5,
                            Nord = 61.8735,
                            Ost = 9.0945999999999998,
                            Rekkefolge = 1
                        },
                        new
                        {
                            KoordinatId = 13,
                            KartEndringId = 5,
                            Nord = 61.873600000000003,
                            Ost = 9.0946999999999996,
                            Rekkefolge = 2
                        },
                        new
                        {
                            KoordinatId = 14,
                            KartEndringId = 5,
                            Nord = 61.873699999999999,
                            Ost = 9.0947999999999993,
                            Rekkefolge = 3
                        },
                        new
                        {
                            KoordinatId = 15,
                            KartEndringId = 5,
                            Nord = 61.873800000000003,
                            Ost = 9.0949000000000009,
                            Rekkefolge = 4
                        },
                        new
                        {
                            KoordinatId = 16,
                            KartEndringId = 5,
                            Nord = 61.873899999999999,
                            Ost = 9.0950000000000006,
                            Rekkefolge = 5
                        },
                        new
                        {
                            KoordinatId = 17,
                            KartEndringId = 5,
                            Nord = 61.874000000000002,
                            Ost = 9.0951000000000004,
                            Rekkefolge = 6
                        },
                        new
                        {
                            KoordinatId = 18,
                            KartEndringId = 6,
                            Nord = 69.649199999999993,
                            Ost = 18.955300000000001,
                            Rekkefolge = 1
                        },
                        new
                        {
                            KoordinatId = 19,
                            KartEndringId = 6,
                            Nord = 69.649299999999997,
                            Ost = 18.955400000000001,
                            Rekkefolge = 2
                        },
                        new
                        {
                            KoordinatId = 20,
                            KartEndringId = 6,
                            Nord = 69.6494,
                            Ost = 18.955500000000001,
                            Rekkefolge = 3
                        },
                        new
                        {
                            KoordinatId = 21,
                            KartEndringId = 7,
                            Nord = 68.4392,
                            Ost = 17.427600000000002,
                            Rekkefolge = 1
                        },
                        new
                        {
                            KoordinatId = 22,
                            KartEndringId = 7,
                            Nord = 68.439300000000003,
                            Ost = 17.427700000000002,
                            Rekkefolge = 2
                        },
                        new
                        {
                            KoordinatId = 23,
                            KartEndringId = 8,
                            Nord = 59.914099999999998,
                            Ost = 10.7524,
                            Rekkefolge = 1
                        },
                        new
                        {
                            KoordinatId = 24,
                            KartEndringId = 8,
                            Nord = 59.914200000000001,
                            Ost = 10.7525,
                            Rekkefolge = 2
                        },
                        new
                        {
                            KoordinatId = 25,
                            KartEndringId = 9,
                            Nord = 70.073800000000006,
                            Ost = 29.749199999999998,
                            Rekkefolge = 1
                        },
                        new
                        {
                            KoordinatId = 26,
                            KartEndringId = 9,
                            Nord = 70.073899999999995,
                            Ost = 29.749300000000002,
                            Rekkefolge = 2
                        },
                        new
                        {
                            KoordinatId = 27,
                            KartEndringId = 9,
                            Nord = 70.073999999999998,
                            Ost = 29.749400000000001,
                            Rekkefolge = 3
                        },
                        new
                        {
                            KoordinatId = 28,
                            KartEndringId = 9,
                            Nord = 70.074100000000001,
                            Ost = 29.749500000000001,
                            Rekkefolge = 4
                        },
                        new
                        {
                            KoordinatId = 29,
                            KartEndringId = 10,
                            Nord = 59.0578,
                            Ost = 10.0364,
                            Rekkefolge = 1
                        },
                        new
                        {
                            KoordinatId = 30,
                            KartEndringId = 10,
                            Nord = 59.057899999999997,
                            Ost = 10.0365,
                            Rekkefolge = 2
                        });
                });

            modelBuilder.Entity("KartverketWebApp.Data.Meldinger", b =>
                {
                    b.Property<int>("MeldingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("MeldingsId"));

                    b.Property<string>("Innhold")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("MottakerPersonId")
                        .HasColumnType("int");

                    b.Property<int>("RapportId")
                        .HasColumnType("int");

                    b.Property<int>("SenderPersonId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Tidsstempel")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MeldingsId");

                    b.HasIndex("MottakerPersonId");

                    b.HasIndex("RapportId");

                    b.HasIndex("SenderPersonId");

                    b.ToTable("Meldinger");

                    b.HasData(
                        new
                        {
                            MeldingsId = 1,
                            Innhold = "Hei Ola, vi trenger mer informasjon om veiskaden du rapporterte.",
                            MottakerPersonId = 1,
                            RapportId = 1,
                            SenderPersonId = 12,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3517)
                        },
                        new
                        {
                            MeldingsId = 2,
                            Innhold = "Hei, her er de detaljerte opplysningene om veiskaden.",
                            MottakerPersonId = 12,
                            RapportId = 1,
                            SenderPersonId = 1,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3525)
                        },
                        new
                        {
                            MeldingsId = 3,
                            Innhold = "Kari, kan du bekrefte oversv�mmelsen i omr�det du rapporterte?",
                            MottakerPersonId = 2,
                            RapportId = 2,
                            SenderPersonId = 12,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3532)
                        },
                        new
                        {
                            MeldingsId = 4,
                            Innhold = "Bekreftet, omr�det er fortsatt oversv�mt.",
                            MottakerPersonId = 12,
                            RapportId = 2,
                            SenderPersonId = 2,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3538)
                        },
                        new
                        {
                            MeldingsId = 5,
                            Innhold = "Per, vi trenger oppdateringer om fjellskredet.",
                            MottakerPersonId = 3,
                            RapportId = 3,
                            SenderPersonId = 12,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3544)
                        },
                        new
                        {
                            MeldingsId = 6,
                            Innhold = "Fjellskredet er n� under overv�king.",
                            MottakerPersonId = 12,
                            RapportId = 3,
                            SenderPersonId = 3,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3550)
                        },
                        new
                        {
                            MeldingsId = 7,
                            Innhold = "Anne, kan du sende bilder av den skadede stien?",
                            MottakerPersonId = 4,
                            RapportId = 4,
                            SenderPersonId = 12,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 21, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3555)
                        },
                        new
                        {
                            MeldingsId = 8,
                            Innhold = "Selvf�lgelig, her er bildene.",
                            MottakerPersonId = 12,
                            RapportId = 4,
                            SenderPersonId = 4,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3563)
                        },
                        new
                        {
                            MeldingsId = 9,
                            Innhold = "Nina, har du innsikt i b�tvrakene?",
                            MottakerPersonId = 5,
                            RapportId = 5,
                            SenderPersonId = 12,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3568)
                        },
                        new
                        {
                            MeldingsId = 10,
                            Innhold = "Ja, vi trenger assistanse for rydding.",
                            MottakerPersonId = 12,
                            RapportId = 5,
                            SenderPersonId = 5,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3573)
                        },
                        new
                        {
                            MeldingsId = 11,
                            Innhold = "Erik, vi har behov for rapporter om trafikkulykken.",
                            MottakerPersonId = 6,
                            RapportId = 6,
                            SenderPersonId = 12,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3577)
                        },
                        new
                        {
                            MeldingsId = 12,
                            Innhold = "Rapportene er under arbeid og vil bli levert snart.",
                            MottakerPersonId = 12,
                            RapportId = 6,
                            SenderPersonId = 6,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3582)
                        },
                        new
                        {
                            MeldingsId = 13,
                            Innhold = "Lise, sn�rasen er kritisk, kan du igangsette tiltak?",
                            MottakerPersonId = 7,
                            RapportId = 7,
                            SenderPersonId = 12,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3587)
                        },
                        new
                        {
                            MeldingsId = 14,
                            Innhold = "Tiltak er iverksatt for � h�ndtere sn�rasen.",
                            MottakerPersonId = 12,
                            RapportId = 7,
                            SenderPersonId = 7,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3592)
                        },
                        new
                        {
                            MeldingsId = 15,
                            Innhold = "Hans, vi trenger mer informasjon om sykkelsti-skaden.",
                            MottakerPersonId = 8,
                            RapportId = 8,
                            SenderPersonId = 12,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3597)
                        },
                        new
                        {
                            MeldingsId = 16,
                            Innhold = "Her er de n�dvendige detaljene.",
                            MottakerPersonId = 12,
                            RapportId = 8,
                            SenderPersonId = 8,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3601)
                        },
                        new
                        {
                            MeldingsId = 17,
                            Innhold = "Mona, kan du overv�ke fiskefeltet?",
                            MottakerPersonId = 9,
                            RapportId = 9,
                            SenderPersonId = 12,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3605)
                        },
                        new
                        {
                            MeldingsId = 18,
                            Innhold = "Fiskefeltet overv�kes kontinuerlig.",
                            MottakerPersonId = 12,
                            RapportId = 9,
                            SenderPersonId = 9,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3610)
                        },
                        new
                        {
                            MeldingsId = 19,
                            Innhold = "Tom, vi trenger data om fiskeriforvaltningen.",
                            MottakerPersonId = 10,
                            RapportId = 10,
                            SenderPersonId = 12,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3615)
                        },
                        new
                        {
                            MeldingsId = 20,
                            Innhold = "Dataene er samlet og kan sendes.",
                            MottakerPersonId = 12,
                            RapportId = 10,
                            SenderPersonId = 10,
                            Status = "sendt",
                            Tidsstempel = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3619)
                        });
                });

            modelBuilder.Entity("KartverketWebApp.Data.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<int?>("BrukerId")
                        .HasColumnType("int");

                    b.Property<string>("Etternavn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Fornavn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PersonId");

                    b.HasIndex("BrukerId");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            BrukerId = 1,
                            Etternavn = "Nordmann",
                            Fornavn = "Ola"
                        },
                        new
                        {
                            PersonId = 2,
                            BrukerId = 2,
                            Etternavn = "Nordmann",
                            Fornavn = "Kari"
                        },
                        new
                        {
                            PersonId = 3,
                            BrukerId = 3,
                            Etternavn = "Hansen",
                            Fornavn = "Per"
                        },
                        new
                        {
                            PersonId = 4,
                            BrukerId = 4,
                            Etternavn = "Larsen",
                            Fornavn = "Anne"
                        },
                        new
                        {
                            PersonId = 5,
                            BrukerId = 5,
                            Etternavn = "Johansen",
                            Fornavn = "Nina"
                        },
                        new
                        {
                            PersonId = 6,
                            BrukerId = 6,
                            Etternavn = "Berg",
                            Fornavn = "Erik"
                        },
                        new
                        {
                            PersonId = 7,
                            BrukerId = 7,
                            Etternavn = "Olsen",
                            Fornavn = "Lise"
                        },
                        new
                        {
                            PersonId = 8,
                            BrukerId = 8,
                            Etternavn = "Moen",
                            Fornavn = "Hans"
                        },
                        new
                        {
                            PersonId = 9,
                            BrukerId = 9,
                            Etternavn = "Lie",
                            Fornavn = "Mona"
                        },
                        new
                        {
                            PersonId = 10,
                            BrukerId = 10,
                            Etternavn = "Halvorsen",
                            Fornavn = "Tom"
                        },
                        new
                        {
                            PersonId = 11,
                            BrukerId = 11,
                            Etternavn = "Lance",
                            Fornavn = "Abu"
                        },
                        new
                        {
                            PersonId = 12,
                            BrukerId = 12,
                            Etternavn = "Behandler",
                            Fornavn = "Saks"
                        },
                        new
                        {
                            PersonId = 13,
                            BrukerId = 13,
                            Etternavn = "Minh",
                            Fornavn = "Adam"
                        },
                        new
                        {
                            PersonId = 14,
                            BrukerId = 14,
                            Etternavn = "Oslo",
                            Fornavn = "Ole"
                        },
                        new
                        {
                            PersonId = 15,
                            BrukerId = 15,
                            Etternavn = "Bergen",
                            Fornavn = "Bj�rn"
                        },
                        new
                        {
                            PersonId = 16,
                            BrukerId = 16,
                            Etternavn = "Stavanger",
                            Fornavn = "Siri"
                        },
                        new
                        {
                            PersonId = 17,
                            BrukerId = 17,
                            Etternavn = "Trondheim",
                            Fornavn = "Knut"
                        },
                        new
                        {
                            PersonId = 18,
                            BrukerId = 18,
                            Etternavn = "Drammen",
                            Fornavn = "Lena"
                        },
                        new
                        {
                            PersonId = 19,
                            BrukerId = 19,
                            Etternavn = "Fredrikstad",
                            Fornavn = "Marta"
                        },
                        new
                        {
                            PersonId = 20,
                            BrukerId = 20,
                            Etternavn = "Kristiansand",
                            Fornavn = "Nils"
                        },
                        new
                        {
                            PersonId = 21,
                            BrukerId = 21,
                            Etternavn = "Sandnes",
                            Fornavn = "Eva"
                        },
                        new
                        {
                            PersonId = 22,
                            BrukerId = 22,
                            Etternavn = "Troms�",
                            Fornavn = "Per"
                        },
                        new
                        {
                            PersonId = 23,
                            BrukerId = 23,
                            Etternavn = "Bod�",
                            Fornavn = "Ingrid"
                        });
                });

            modelBuilder.Entity("KartverketWebApp.Data.Rapport", b =>
                {
                    b.Property<int>("RapportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RapportId"));

                    b.Property<DateTime?>("BehandletDato")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("KartEndringId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Opprettet")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("RapportStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TildelAnsattId")
                        .HasColumnType("int");

                    b.HasKey("RapportId");

                    b.HasIndex("KartEndringId");

                    b.HasIndex("PersonId");

                    b.HasIndex("TildelAnsattId");

                    b.ToTable("Rapport");

                    b.HasData(
                        new
                        {
                            RapportId = 1,
                            KartEndringId = 1,
                            Opprettet = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3064),
                            PersonId = 1,
                            RapportStatus = "Uåpnet",
                            TildelAnsattId = 1
                        },
                        new
                        {
                            RapportId = 2,
                            KartEndringId = 2,
                            Opprettet = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3186),
                            PersonId = 2,
                            RapportStatus = "Under behandling",
                            TildelAnsattId = 1
                        },
                        new
                        {
                            RapportId = 3,
                            BehandletDato = new DateTime(2022, 3, 15, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            KartEndringId = 3,
                            Opprettet = new DateTime(2022, 3, 13, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 3,
                            RapportStatus = "Avklart",
                            TildelAnsattId = 1
                        },
                        new
                        {
                            RapportId = 4,
                            KartEndringId = 4,
                            Opprettet = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3202),
                            PersonId = 4,
                            RapportStatus = "Uåpnet",
                            TildelAnsattId = 1
                        },
                        new
                        {
                            RapportId = 5,
                            KartEndringId = 5,
                            Opprettet = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3209),
                            PersonId = 5,
                            RapportStatus = "Under behandling",
                            TildelAnsattId = 1
                        },
                        new
                        {
                            RapportId = 6,
                            BehandletDato = new DateTime(2022, 8, 22, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            KartEndringId = 6,
                            Opprettet = new DateTime(2022, 8, 20, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 6,
                            RapportStatus = "Avklart",
                            TildelAnsattId = 1
                        },
                        new
                        {
                            RapportId = 7,
                            KartEndringId = 7,
                            Opprettet = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3218),
                            PersonId = 7,
                            RapportStatus = "Uåpnet",
                            TildelAnsattId = 1
                        },
                        new
                        {
                            RapportId = 8,
                            KartEndringId = 8,
                            Opprettet = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3233),
                            PersonId = 8,
                            RapportStatus = "Under behandling",
                            TildelAnsattId = 1
                        },
                        new
                        {
                            RapportId = 9,
                            BehandletDato = new DateTime(2023, 1, 10, 9, 15, 0, 0, DateTimeKind.Unspecified),
                            KartEndringId = 9,
                            Opprettet = new DateTime(2023, 1, 8, 9, 15, 0, 0, DateTimeKind.Unspecified),
                            PersonId = 9,
                            RapportStatus = "Avklart",
                            TildelAnsattId = 1
                        },
                        new
                        {
                            RapportId = 10,
                            KartEndringId = 10,
                            Opprettet = new DateTime(2024, 11, 22, 20, 29, 44, 895, DateTimeKind.Local).AddTicks(3241),
                            PersonId = 10,
                            RapportStatus = "Uåpnet",
                            TildelAnsattId = 1
                        });
                });

            modelBuilder.Entity("KartverketWebApp.Data.Steddata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Fylkenavn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Fylkenummer")
                        .HasColumnType("int");

                    b.Property<string>("Kommunenavn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Kommunenummer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Steddata");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Fylkenavn = "Oslo",
                            Fylkenummer = 3,
                            Kommunenavn = "Oslo",
                            Kommunenummer = 301
                        },
                        new
                        {
                            Id = 2,
                            Fylkenavn = "Vestland",
                            Fylkenummer = 46,
                            Kommunenavn = "Bergen",
                            Kommunenummer = 4601
                        },
                        new
                        {
                            Id = 3,
                            Fylkenavn = "Tr�ndelag",
                            Fylkenummer = 50,
                            Kommunenavn = "Trondheim",
                            Kommunenummer = 5001
                        },
                        new
                        {
                            Id = 4,
                            Fylkenavn = "Agder",
                            Fylkenummer = 42,
                            Kommunenavn = "Kristiansand",
                            Kommunenummer = 4204
                        },
                        new
                        {
                            Id = 5,
                            Fylkenavn = "Innlandet",
                            Fylkenummer = 34,
                            Kommunenavn = "V�g�",
                            Kommunenummer = 3435
                        },
                        new
                        {
                            Id = 6,
                            Fylkenavn = "Troms og Finnmark",
                            Fylkenummer = 55,
                            Kommunenavn = "Troms�",
                            Kommunenummer = 5401
                        },
                        new
                        {
                            Id = 7,
                            Fylkenavn = "Nordland",
                            Fylkenummer = 18,
                            Kommunenavn = "Bod�",
                            Kommunenummer = 1804
                        },
                        new
                        {
                            Id = 8,
                            Fylkenavn = "Oslo",
                            Fylkenummer = 3,
                            Kommunenavn = "Oslo",
                            Kommunenummer = 301
                        },
                        new
                        {
                            Id = 9,
                            Fylkenavn = "Finnmark",
                            Fylkenummer = 56,
                            Kommunenavn = "Vads�",
                            Kommunenummer = 5405
                        },
                        new
                        {
                            Id = 10,
                            Fylkenavn = "Vestfold og Telemark",
                            Fylkenummer = 40,
                            Kommunenavn = "Skien",
                            Kommunenummer = 3807
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KartverketWebApp.Data.Ansatt", b =>
                {
                    b.HasOne("KartverketWebApp.Data.Person", "Person")
                        .WithMany("Ansatt")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Kart", b =>
                {
                    b.HasOne("KartverketWebApp.Data.Steddata", "Steddata")
                        .WithOne("Kart")
                        .HasForeignKey("KartverketWebApp.Data.Kart", "SteddataId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Steddata");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Koordinater", b =>
                {
                    b.HasOne("KartverketWebApp.Data.Kart", "Kart")
                        .WithMany("Koordinater")
                        .HasForeignKey("KartEndringId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kart");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Meldinger", b =>
                {
                    b.HasOne("KartverketWebApp.Data.Person", "Mottaker")
                        .WithMany()
                        .HasForeignKey("MottakerPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KartverketWebApp.Data.Rapport", "Rapport")
                        .WithMany("Meldinger")
                        .HasForeignKey("RapportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KartverketWebApp.Data.Person", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderPersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mottaker");

                    b.Navigation("Rapport");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Person", b =>
                {
                    b.HasOne("KartverketWebApp.Data.Bruker", "Bruker")
                        .WithMany("Personer")
                        .HasForeignKey("BrukerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Bruker");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Rapport", b =>
                {
                    b.HasOne("KartverketWebApp.Data.Kart", "Kart")
                        .WithMany("Rapporter")
                        .HasForeignKey("KartEndringId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KartverketWebApp.Data.Person", "Person")
                        .WithMany("Rapporter")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KartverketWebApp.Data.Ansatt", "TildelAnsatt")
                        .WithMany("Rapporter")
                        .HasForeignKey("TildelAnsattId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Kart");

                    b.Navigation("Person");

                    b.Navigation("TildelAnsatt");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KartverketWebApp.Data.Ansatt", b =>
                {
                    b.Navigation("Rapporter");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Bruker", b =>
                {
                    b.Navigation("Personer");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Kart", b =>
                {
                    b.Navigation("Koordinater");

                    b.Navigation("Rapporter");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Person", b =>
                {
                    b.Navigation("Ansatt");

                    b.Navigation("Rapporter");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Rapport", b =>
                {
                    b.Navigation("Meldinger");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Steddata", b =>
                {
                    b.Navigation("Kart")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
