@model KartverketWebApp.Models.CombinedViewModel
@{
    var position = Model.Positions.FirstOrDefault();
}

<div class="container">
    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5>Tittel</h5>
                    <p>@position?.Tittel</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5>Beskrivelse</h5>
                    <p>@position?.Beskrivelse</p>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5>Rapporttype</h5>
                    <p>@position?.RapportType</p>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-12">
            <div id="map_corrections" style="height: 400px; width: 100%;"></div>
        </div>
    </div>

    @section Scripts {
        <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
        <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                console.log("Initializing Leaflet map");

                // Use the Model.Positions[0].Coordinates to initialize the map
                var coordinates = @Html.Raw(Json.Serialize(position?.Coordinates));
                console.log("Coordinates data:", coordinates);

                // Check if there's at least one coordinate
                if (coordinates && coordinates.length > 0) {
                    var firstCoord = coordinates[0]; // Use the first coordinate for the initial view
                    var map = L.map('map_corrections', {
                        center: [firstCoord.Nord, firstCoord.Ost],
                        zoom: 13
                    });

                    // Define Kartverket tile layers
                    var norgeKart = L.tileLayer('https://opencache.statkart.no/gatekeeper/gk/gk.open_gmaps?layers=topo4&zoom={z}&x={x}&y={y}', {
                        attribution: '© <a href="https://www.kartverket.no/">Kartverket</a>'
                    });

                    var turKart = L.tileLayer('https://opencache.statkart.no/gatekeeper/gk/gk.open_gmaps?layers=toporaster4&zoom={z}&x={x}&y={y}', {
                        attribution: '© <a href="https://www.kartverket.no/">Kartverket</a>'
                    });

                    var sjoKart = L.tileLayer('https://opencache.statkart.no/gatekeeper/gk/gk.open_gmaps?layers=sjokartraster&zoom={z}&x={x}&y={y}', {
                        attribution: '© <a href="https://www.kartverket.no/">Kartverket</a>'
                    });

                    // Add the appropriate base layer
                    if (position?.MapType === "Norge kart") {
                        norgeKart.addTo(map);
                        console.log("Loaded Norge kart");
                    } else if (position?.MapType === "Turkart") {
                        turKart.addTo(map);
                        console.log("Loaded Turkart");
                    } else if (position?.MapType === "Sjøkart") {
                        sjoKart.addTo(map);
                        console.log("Loaded Sjøkart");
                    } else {
                        norgeKart.addTo(map);
                        console.log("Defaulting to Norge kart");
                    }

                    // Create an array of LatLng points
                    var latlngs = coordinates.map(coord => [coord.Nord, coord.Ost]);

                    // Create a blue polyline connecting all points
                    var polyline = L.polyline(latlngs, {
                        color: 'blue',
                        weight: 3,
                        opacity: 0.8
                    }).addTo(map);

                    // Add start and end markers with different colors
                    if (latlngs.length > 0) {
                        // Start marker (green)
                        L.marker(latlngs[0], {
                            icon: L.divIcon({
                                className: 'custom-div-icon',
                                html: '<div style="background-color: #4CAF50; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;"></div>',
                                iconSize: [15, 15],
                                iconAnchor: [7, 7]
                            })
                        }).addTo(map).bindPopup('Startpunkt');

                        // End marker (red) - only if there's more than one point
                        if (latlngs.length > 1) {
                            L.marker(latlngs[latlngs.length - 1], {
                                icon: L.divIcon({
                                    className: 'custom-div-icon',
                                    html: '<div style="background-color: #f44336; width: 15px; height: 15px; border-radius: 50%; border: 2px solid white;"></div>',
                                    iconSize: [15, 15],
                                    iconAnchor: [7, 7]
                                })
                            }).addTo(map).bindPopup('Sluttpunkt');
                        }

                        // Add intermediate points if there are any
                        for (let i = 1; i < latlngs.length - 1; i++) {
                            L.marker(latlngs[i], {
                                icon: L.divIcon({
                                    className: 'custom-div-icon',
                                    html: '<div style="background-color: #2196F3; width: 10px; height: 10px; border-radius: 50%; border: 2px solid white;"></div>',
                                    iconSize: [10, 10],
                                    iconAnchor: [5, 5]
                                })
                            }).addTo(map).bindPopup(`Punkt ${i + 1}`);
                        }

                        // Create an area around the polyline (buffer)
                        var bufferedArea = [];
                        var bufferDistance = 0.0002; // Adjust this value to change the buffer size

                        for (let i = 0; i < latlngs.length - 1; i++) {
                            let p1 = latlngs[i];
                            let p2 = latlngs[i + 1];
                            
                            // Calculate perpendicular points for buffer
                            let dx = p2[1] - p1[1];
                            let dy = p2[0] - p1[0];
                            let length = Math.sqrt(dx * dx + dy * dy);
                            
                            let normalX = -dy / length * bufferDistance;
                            let normalY = dx / length * bufferDistance;

                            // Add buffer points
                            bufferedArea.push([p1[0] + normalY, p1[1] + normalX]);
                            bufferedArea.push([p2[0] + normalY, p2[1] + normalX]);
                        }

                        // Add points in reverse order to close the polygon
                        for (let i = latlngs.length - 1; i > 0; i--) {
                            let p1 = latlngs[i];
                            let p2 = latlngs[i - 1];
                            
                            let dx = p2[1] - p1[1];
                            let dy = p2[0] - p1[0];
                            let length = Math.sqrt(dx * dx + dy * dy);
                            
                            let normalX = -dy / length * bufferDistance;
                            let normalY = dx / length * bufferDistance;

                            bufferedArea.push([p1[0] - normalY, p1[1] - normalX]);
                            bufferedArea.push([p2[0] - normalY, p2[1] - normalX]);
                        }

                        // Create and add the buffered area polygon
                        L.polygon(bufferedArea, {
                            color: 'blue',
                            weight: 1,
                            opacity: 0.3,
                            fillOpacity: 0.1
                        }).addTo(map);
                    }

                    // Fit the map to show all markers
                    map.fitBounds(polyline.getBounds(), {
                        padding: [50, 50] // Add some padding around the bounds
                    });

                    // Ensure the map resizes correctly
                    setTimeout(() => {
                        map.invalidateSize();
                    }, 300);
                } else {
                    console.warn("No valid coordinates found for the position.");
                }
            });
        </script>
    }
</div>