// <auto-generated />
using System;
using KartverketWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KartverketWebApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241029111904_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("KartverketWebApp.Data.Bruker", b =>
                {
                    b.Property<int>("BrukerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("BrukerId"));

                    b.Property<string>("BrukerType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Brukernavn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Passord")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BrukerId");

                    b.ToTable("Bruker");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Kart", b =>
                {
                    b.Property<int>("KartEndringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("KartEndringId"));

                    b.Property<string>("Beskrivelse")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("KoordinaterId")
                        .HasColumnType("int");

                    b.Property<int?>("KoordinaterKoordinatId")
                        .HasColumnType("int");

                    b.Property<int>("Koordsys")
                        .HasColumnType("int");

                    b.Property<string>("MapType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RapportType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tittel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("KartEndringId");

                    b.HasIndex("KoordinaterId");

                    b.HasIndex("KoordinaterKoordinatId");

                    b.ToTable("Kart");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Koordinater", b =>
                {
                    b.Property<int>("KoordinatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("KoordinatId"));

                    b.Property<double>("Nord")
                        .HasColumnType("double");

                    b.Property<double>("Ost")
                        .HasColumnType("double");

                    b.Property<int>("Rekkefolge")
                        .HasColumnType("int");

                    b.HasKey("KoordinatId");

                    b.ToTable("Koordinater");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PersonId"));

                    b.Property<int?>("BrukerId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Etternavn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Fornavn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Telefon")
                        .HasColumnType("int");

                    b.HasKey("PersonId");

                    b.HasIndex("BrukerId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Rapport", b =>
                {
                    b.Property<int>("RapportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RapportId"));

                    b.Property<int>("KartEndringId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Opprettet")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("RapportStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RapportId");

                    b.HasIndex("KartEndringId");

                    b.HasIndex("PersonId");

                    b.ToTable("Rapport");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Kart", b =>
                {
                    b.HasOne("KartverketWebApp.Data.Koordinater", "Koordinater")
                        .WithMany()
                        .HasForeignKey("KoordinaterId");

                    b.HasOne("KartverketWebApp.Data.Koordinater", null)
                        .WithMany("Kart")
                        .HasForeignKey("KoordinaterKoordinatId");

                    b.Navigation("Koordinater");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Person", b =>
                {
                    b.HasOne("KartverketWebApp.Data.Bruker", "Bruker")
                        .WithMany("Personer")
                        .HasForeignKey("BrukerId");

                    b.Navigation("Bruker");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Rapport", b =>
                {
                    b.HasOne("KartverketWebApp.Data.Kart", "Kart")
                        .WithMany("Rapporter")
                        .HasForeignKey("KartEndringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KartverketWebApp.Data.Person", "Person")
                        .WithMany("Rapporter")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kart");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Bruker", b =>
                {
                    b.Navigation("Personer");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Kart", b =>
                {
                    b.Navigation("Rapporter");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Koordinater", b =>
                {
                    b.Navigation("Kart");
                });

            modelBuilder.Entity("KartverketWebApp.Data.Person", b =>
                {
                    b.Navigation("Rapporter");
                });
#pragma warning restore 612, 618
        }
    }
}
